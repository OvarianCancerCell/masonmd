return(list(gene = as.character(cds$geneid), txid = as.character(cds$txid) , seq= as.character(cds$seq), tx = tx))
}
get.longest.cds.by.geneID <- function(gene_id) # combine
{
anno <- get.anno.by.geneID(gene_id)
tx <- anno$tx
cds <- anno$cds
cds <- cds[which.max(cds$width),]
tx <- tx[tx$TXID == cds$txid,]
return(list(gene = as.character(cds$geneid), txid = as.character(cds$txid) , seq= as.character(cds$seq), tx = tx))
}
# get the mutated sequence
get.mut.seq <- function(mut_entry)
{
ref = mut_entry["ref"]
cds <- get.longest.cds(mut_entry = mut_entry,ref)
tx <- cds$tx
txid <- cds$txid
wt_seq <- cds$seq
n.exon <- nrow(tx[!is.na(tx$CDSSTART),])
wt_pos <- get_tx_seq(tx,ncbi_build = ref)
wt_exjun <- wt_pos$exonJunction
wt_pos <- wt_pos$wt_pos
strand <- as.character (unique(tx$EXONSTRAND))
note<- ""
mut_seq <- NA
mut_exjun <- NA
if(length(cds$gene) >0)
{
if(strand == "+") # gene on the + strand
{
ref_nt <- as.character(mut_entry[5])
mut_nt <- as.character(mut_entry[6])
mut_start <- as.numeric(mut_entry[3])
mut_end <- as.numeric(mut_entry[4])
}
if( strand  == "-")
{
ref_nt <- as.character(mut_entry[5])
mut_nt <- as.character(mut_entry[6])
mut_start <- as.numeric(mut_entry[3])
mut_end <-  as.numeric(mut_entry[4])
ref_nt <- as.character(reverseComplement(DNAString(ref_nt)))
mut_nt <- as.character(reverseComplement(DNAString(mut_nt)))
}
if(!any(mut_start:mut_end %in% min(wt_pos):max(wt_pos))) # mutation out of the transcript
{
note <- "mutation outside"
mut_seq <- wt_seq
mut_exjun <- wt_exjun
} else if( all(mut_start:mut_end %in% min(wt_pos):max(wt_pos)) & (!any(mut_start:mut_end %in% wt_pos))) # mutation position in intron
{
note <- "mutation in intron"
mut_seq <- wt_seq
mut_exjun <- wt_exjun
}else if( all(mut_start:mut_end %in% wt_pos)) # mutation in CDS
{
mut_start <- which(wt_pos==mut_start)
mut_end <- which(wt_pos==mut_end)
note<-""
} else # part of the mutation in exon
{
note  <-  "mutation partially in cds"
mut_seq <- NA
mut_exjun <- NA
}
if(note=="" ) # check if mutation is on splice site
{
mut_start <- c(mut_start,mut_end)
mut_end <- max(mut_start)
mut_start <- min(mut_start)
# use function
mut_exjun<- get_mut_seq_exjun(wt_exjun = wt_exjun,wt_seq=wt_seq,mut_nt = mut_nt,mut_start = mut_start,
mut_end = mut_end, ref_nt = ref_nt,txid = txid, note =note)
note <- mut_exjun$note
mut_seq <- mut_exjun$seq
mut_exjun <- mut_exjun$exjun
}else{
mut_seq <- NA
mut_exjun <- NA
}
return(list(mut_seq= mut_seq, mut_exjun = mut_exjun, note= note,wt_seq=wt_seq,n.exon=n.exon))
}
}
# find where is the last exon-exon junction or decide if it is a single-exon gene
last.exexjun.pos <- function(mut_exjun)
{
note <- ""
if((sum(mut_exjun==1)) %in% ((1:1000)*2))
{
last_exon_exon_junction<- which(mut_exjun==1)[length( which(mut_exjun==1))-1]
note <- ""
}else if(sum(mut_exjun==1) %in% ((1:1000)*2+1))
{
last_exon_exon_junction<- which(mut_exjun==1)[length( which(mut_exjun==1))-1]
note <- "splice site mutated"
}else if(sum(mut_exjun==1)==1)
{
last_exon_exon_junction<- which(mut_exjun==1)
note<- "splice site mut"
}else if(sum(mut_exjun==1)==0)
{
last_exon_exon_junction<-length(mut_exjun)
note <- "single exon"
}
return(list(last_exon_exon_junction=last_exon_exon_junction,note=note))
}
# classify
mut.info <- function(mut_entry)
{
mut_seq <- get.mut.seq(mut_entry) # get the mutated seq, wt seq, pos of mut exon-exon junctions and number of exons
note <- mut_seq$note
wt_seq <- mut_seq$wt_seq
n.exon <- mut_seq$n.exon
if(length(note)>1)
note <- paste(note,collapse = " ")
note <- gsub("  ", "", note, fixed = TRUE)
mut_exjun <- mut_seq$mut_exjun
mut_seq <- mut_seq$mut_seq
if(!is.na(mut_seq))
{
last.exexjun <- last.exexjun.pos(mut_exjun)
if(last.exexjun$note!="")  note <- paste(note,last.exexjun$note,sep=",")
last.exexjun <- last.exexjun$last_exon_exon_junction
}else
{
last.exexjun = NA
}
return(c(mut_seq=mut_seq,last.exexjun=last.exexjun,note=note,wt_seq = wt_seq, n.exon = n.exon))
}
# classify the mutations into NMD or non-NMD, and return the position of premature stop codon in CDS
classify.nmd <- function(mut_entry)
{
mut_info <- mut.info(mut_entry )
mut_seq <-as.character( mut_info[1] )
wt_seq <- as.character(mut_info[4])
n.exon <- as.numeric(mut_info[5])
last_exon_exon_junction <- as.numeric(mut_info[2])
nmd.detail <- NA
nmd.detail2 <- NA
note1<-as.character(mut_info[3])
note<-""
pos.ptc <- NA
have.ptc <- F
length <- NA
if(!is.na(mut_seq))
{
length <- nchar(mut_seq)
if(nchar(mut_seq)>0) # it has mutated sequences
{
start_pos = findStartPos(seq=mut_seq) # find the start position
stop_pos = findStopPos(seq=mut_seq)# find the stop position in the frame
if(length(start_pos)==0) # cannot find start codon
{
note <- "no start codon"
}else if(length(stop_pos)==0) # cannot find start codon
{
note <- "no stop codon"
}else{  # find start and stop codon
start_pos = min(start_pos) # choose the cloest as the start position
ORF <- findORF(start_pos=start_pos,k = 0,stop_pos=stop_pos)
if( nrow(ORF)==0)
{
nmd.detail  = F
note = "cannot find ORF"
pos.ptc <- Inf # no stop codon
}else # find ORF
{
ORF <-  ORF[which.min( ORF[,"Stop"]),]
pos.ptc <- ORF["Stop"]
if(pos.ptc > nchar(mut_seq)-3) # normal coding sequence no PTC
{
have.ptc <- F
note = "normal sc"
nmd.detail <- F
}else{
if(pos.ptc <= nchar(mut_seq)-3) have.ptc <- T
if(n.exon<1.1)
{
nmd.detail <- F
note = "single exon"
}else if(pos.ptc < (last_exon_exon_junction -50) & pos.ptc > 200){
nmd.detail <- T
}else if(pos.ptc >= (last_exon_exon_junction -50)& pos.ptc <(nchar(mut_seq)-2))
{
nmd.detail <- F
note = "PTC too close to leej"
}else if(pos.ptc < 200)
{
nmd.detail <- F
note = "PTC too close to start codon"
}else if(is.infinite(pos.ptc)){
nmd.detail <- F
note = "nonstop"
}else{
nmd.detail <- F
note = "unclear"
}
} # have PTC
}
}
}
# find the new start and stop codons in the sequence
if(nchar(wt_seq)>0) # it has wt sequences
{
start_pos = findStartPos(seq=wt_seq) # find the start position
stop_pos = findStopPos(seq=wt_seq)# find the stop position in the frame
if(length(start_pos)==0) # cannot find start codon
{
note <- paste(note,"no start codon in wt")
} else if(length(stop_pos)==0) # cannot find start codon
{
note <-paste(note, "no stop codon in wt" )
}else # find start and stop codon
{
start_pos = min(start_pos) # choose the cloest as the start position
if(start_pos!=1) note <-paste(note, "wt cds not start with start codon" )
ORF <- findORF(start_pos=start_pos,k = 0,stop_pos=stop_pos)
if(nrow(ORF)==0)
{
nmd.detail2  = F
note = paste(note, "can't find ORF in wt")
}else{ # find ORF in WT
ORF <-  ORF[which.min( ORF[,"Start"]),]
if(ORF["Stop"] ==nchar(wt_seq)){
nmd.detail2 <- T
note <-paste(note, "PTC in wt" )
}else nmd.detail2 <- F
}
}
}
}
note <- paste(note1,note)
return(c( mut_nmd = nmd.detail,note=note, wt_nmd = nmd.detail2, PTC = pos.ptc,have.ptc=have.ptc,mutseq_length=length,last_exon_exon_junction=last_exon_exon_junction,n.exon=n.exon))
}
# if the number if whole number?
is.wholenumber <-
function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol
# see if the gene has correct CDS annotation
assess.annotation <- function(mut_entry,ref)
{
cds <- get.longest.cds(mut_entry,ref)
# whether it is right coding sequence
if(nchar(cds$seq)>0){
if(is.wholenumber(nchar(cds$seq)/3))
{
wt_seq <- cds$seq
start_pos = findStartPos(seq=wt_seq) # find the start position
stop_pos = findStopPos(seq=wt_seq)# find the stop position in the frame
if(length(start_pos)==0) # no start codon found
{
index=1 #"no start pos"
}
else
{
if(min(start_pos)!=1) # not start wiht start codon
{
index=2 # "not start with start codon"
}
else
{ # do start with start codon
if(length(stop_pos)==0) # have no stop codon
{
index=3 #"have no stop codon"
}
else
{ # do have stop codon
ORF <- findORF(start_pos=min(start_pos),k = 0,stop_pos=stop_pos)
if(nrow(ORF)==0)
{
index=4 # "no ORF found"
}
else
{
if(min(ORF[,4])+2 < nchar(wt_seq))
{
index=5 # "PTC in WT"
}
else
{
index=0 # "right annotation"
}
}
}
}
}
}else
{
index=6#return("length not 3 multiple")
}
}else index=7#return("no cds")
return(index)
}
get.mut.entry <- function(entrez,mut_start,mut_end,ref_nt, mut_nt,ref="37")
{
mut_entry <- rep(NA,6)
names(mut_entry) <- c("geneId","ref","mut_start","mut_end","ref_nt","mut_nt")
mut_entry[1] <-entrez
mut_entry[2] <-ref
mut_entry[3] <-mut_start
mut_entry[4] <- mut_end
mut_entry[5] <- ref_nt
mut_entry[6] <- mut_nt
return(mut_entry)
}
predict.nmd <- function(entrez,mut_start,mut_end,ref_nt, mut_nt,ref="37")
{
mut_entry <- get.mut.entry(entrez,mut_start,mut_end,ref_nt, mut_nt,ref="37")
index = assess.annotation(mut_entry,ref)
# 1) #"no start pos"
# 2) # "not start with start codon"
# 3) #"have no stop codon"
# 4) # "no ORF found"
# 5) # "PTC in WT"
# 6) "length not 3 multiple"
# 7) "no cds"
# 0) # "right annotation"
if(index==0)
{
return(classify.nmd(mut_entry))
}else if(index>0&index<=7){
note = c("no start pos",
"not start with start codon",
"have no stop codon",
"no ORF found",
"PTC in WT",
"length not 3 multiple",
"no cds")
return(note[index])
}
}
install.packages("formatR")
library(masonmd)
library(masonmd)
devtools::build vignette
library(devtools)
devtools::build vignette
install(build_vignette = FALSE)
library(masonmd)
?masonmd
??masonmd
library(masonmd)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
load("~/Google 云端硬盘/Project NMD/R/20161119PANCAN.RData")
?devtools::install
.libPaths()
lapply(.libPaths(), dir)
??roxygen2
library(masonmd)
?findrevORF
man-roxygen
formatR
install.packages("formatR")
library(masonmd)
??select
pancan_mut <- read.delim( "~/TCGA_NMD/Xena/PANCAN/PANCAN_mutation",header = T,as.is = T)
pancan_mut <- read.csv( "../PANCAN_table_manuscript/TableS1_cancer_table_summary.csv")
head( pancan_mut)
pancan_mut <- read.delim( "../PANCAN_results/supplementary tables/20161117supplementarytable1.txt")
pancan_mut <- read.delim( "example_TCGA.txt")
head(pancan_mut )
devtools::build()
?classify.nmd
devtools::build()
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg18")
library(masonmd)
pryr::mem_used()
install.packages("pryr")
x <- sample(1000)
devtools::use_data(x, mtcars, internal = TRUE)
system.file("extdata", "2012.csv", package = "testdat")
tools::checkRdaFiles()
install.packages("tools")
?predict.lm
mtcars
library(TxDb.Hsapiens.UCSC.hg19.knownGene);library('BSgenome.Hsapiens.UCSC.hg19') # NCBI build 37
library(TxDb.Hsapiens.UCSC.hg18.knownGene);library('BSgenome.Hsapiens.UCSC.hg18') # NCBI build 36
txdb37 <- TxDb.Hsapiens.UCSC.hg19.knownGene# NCBI build 37
genome37 <- BSgenome.Hsapiens.UCSC.hg19# NCBI build 37
tx37 <- select(txdb37, keys = as.character(unique(gene_list)),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
tx37 <- tx37[!is.na(tx37$CDSSTART),]
keys(txdb37)
txdb37 <- TxDb.Hsapiens.UCSC.hg19.knownGene# NCBI build 37
genome37 <- BSgenome.Hsapiens.UCSC.hg19# NCBI build 37
tx37 <- select(txdb37, keys = as.character(unique(keys(txdb37))),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
tx37 <- tx37[!is.na(tx37$CDSSTART),]
gene2tx37 <- select(txdb37, keys = as.character(unique(gene_list)), columns="TXID", keytype="GENEID")
cds <- cdsBy(txdb37, by="tx" )
cds_seqs37 <- extractTranscriptSeqs(genome37, cds) # all CDS in NCBI build 37
# database of build 37, have all CDS
cds37 <- data.frame(txid = names(cds_seqs37),geneid = gene2tx37$GENEID[match(names(cds_seqs37),gene2tx37$TXID)],seq = as.character(cds_seqs37),width = width(cds_seqs37))
cds37 <- cds37[!is.na(cds37$geneid),]
cds37 <- cds37[!duplicated(paste(cds37$geneid,cds37$seq)),]
# build36
txdb36 <- TxDb.Hsapiens.UCSC.hg18.knownGene# NCBI build 37
genome36 <- BSgenome.Hsapiens.UCSC.hg18# NCBI build 37
tx36 <- select(txdb36, keys = as.character(unique(keys(txdb36))),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
tx36 <- tx36[!is.na(tx36$CDSSTART),]
gene2tx36 <- select(txdb36, keys = as.character(unique(gene_list)), columns="TXID", keytype="GENEID")
cds <- cdsBy(txdb36, by="tx" )
cds_seqs36 <- extractTranscriptSeqs(genome36, cds) # all CDS in NCBI build 36
txdb37 <- TxDb.Hsapiens.UCSC.hg19.knownGene# NCBI build 37
genome37 <- BSgenome.Hsapiens.UCSC.hg19# NCBI build 37
tx37 <- select(txdb37, keys = as.character(unique(keys(txdb37))),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
gene2tx37 <- select(txdb37, keys = as.character(unique(keys(txdb37))), columns="TXID", keytype="GENEID")
cds <- cdsBy(txdb37, by="tx" )
cds_seqs37 <- extractTranscriptSeqs(genome37, cds) # all CDS in NCBI build 37
# database of build 37, have all CDS
cds37 <- data.frame(txid = names(cds_seqs37),geneid = gene2tx37$GENEID[match(names(cds_seqs37),gene2tx37$TXID)],seq = as.character(cds_seqs37),width = width(cds_seqs37))
cds37 <- cds37[!is.na(cds37$geneid),]
cds37 <- cds37[!duplicated(paste(cds37$geneid,cds37$seq)),]
# build36
txdb36 <- TxDb.Hsapiens.UCSC.hg18.knownGene# NCBI build 37
genome36 <- BSgenome.Hsapiens.UCSC.hg18# NCBI build 37
tx36 <- select(txdb36, keys = as.character(unique(keys(txdb36))),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
tx36 <- tx36[!is.na(tx36$CDSSTART),]
gene2tx36 <- select(txdb36, keys = as.character(unique(keys(txdb36))), columns="TXID", keytype="GENEID")
cds <- cdsBy(txdb36, by="tx" )
cds_seqs36 <- extractTranscriptSeqs(genome36, cds) # all CDS in NCBI build 36
# database of build 36, have all CDS
cds36 <- data.frame(txid = names(cds_seqs36),geneid = gene2tx36$GENEID[match(names(cds_seqs36),gene2tx36$TXID)],seq = as.character(cds_seqs36),width = width(cds_seqs36))
cds36 <- cds36[!is.na(cds36$geneid),]
cds36 <- cds36[!duplicated(paste(cds36$geneid,cds36$seq)),]
devtools::use_data(x, mtcars, internal = TRUE)
devtools::use_data(tx37, tx36, cds37, cds36, genome36, genome37, compress = gzip, internal = TRUE)
devtools::use_data(tx37, tx36, cds37, cds36, genome36, genome37, compress = gzip, overwrite = T, internal = TRUE)
devtools::use_data(tx37, tx36, cds37, cds36, genome36, genome37, compress = "gzip", overwrite = T, internal = TRUE)
pancan_mut[1,]
?substr
library(masonmd)
?get.longest.cds
？？get.longest.cds
??get.longest.cds
detach("package:masonmd", unload=TRUE)
remove.packages("masonmd")
remove.packages("masonmd")
?matchPattern
??matchPattern
R CMD build --resave-data
?devtools::use_data
library(TxDb.Hsapiens.UCSC.hg19.knownGene);library('BSgenome.Hsapiens.UCSC.hg19') # NCBI build 37
library(TxDb.Hsapiens.UCSC.hg18.knownGene);library('BSgenome.Hsapiens.UCSC.hg18') # NCBI build 36
txdb37 <- TxDb.Hsapiens.UCSC.hg19.knownGene# NCBI build 37
genome37 <- BSgenome.Hsapiens.UCSC.hg19# NCBI build 37
tx37 <- select(txdb37, keys = as.character(unique(keys(txdb37))),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
gene2tx37 <- select(txdb37, keys = as.character(unique(keys(txdb37))), columns="TXID", keytype="GENEID")
cds <- cdsBy(txdb37, by="tx" )
cds_seqs37 <- extractTranscriptSeqs(genome37, cds) # all CDS in NCBI build 37
# database of build 37, have all CDS
cds37 <- data.frame(txid = names(cds_seqs37),geneid = gene2tx37$GENEID[match(names(cds_seqs37),gene2tx37$TXID)],seq = as.character(cds_seqs37),width = width(cds_seqs37))
cds37 <- cds37[!is.na(cds37$geneid),]
cds37 <- cds37[!duplicated(paste(cds37$geneid,cds37$seq)),]
# build36
txdb36 <- TxDb.Hsapiens.UCSC.hg18.knownGene# NCBI build 37
genome36 <- BSgenome.Hsapiens.UCSC.hg18# NCBI build 37
tx36 <- select(txdb36, keys = as.character(unique(keys(txdb36))),
columns=c("GENEID","TXID","TXSTART","TXEND","EXONID","EXONCHROM",
"EXONSTRAND","EXONSTART","EXONEND","CDSEND" ,"CDSID","CDSSTART"), keytype="GENEID")
tx36 <- tx36[!is.na(tx36$CDSSTART),]
gene2tx36 <- select(txdb36, keys = as.character(unique(keys(txdb36))), columns="TXID", keytype="GENEID")
cds <- cdsBy(txdb36, by="tx" )
cds_seqs36 <- extractTranscriptSeqs(genome36, cds) # all CDS in NCBI build 36
# database of build 36, have all CDS
cds36 <- data.frame(txid = names(cds_seqs36),geneid = gene2tx36$GENEID[match(names(cds_seqs36),gene2tx36$TXID)],seq = as.character(cds_seqs36),width = width(cds_seqs36))
cds36 <- cds36[!is.na(cds36$geneid),]
cds36 <- cds36[!duplicated(paste(cds36$geneid,cds36$seq)),]
devtools::use_data(tx37, tx36, cds37, cds36, genome36, genome37, compress = "xz", overwrite = T, internal = TRUE)
devtools::use_vignette("my-vignette")
library(masonmd)
library(masonmd)
?classify.nmd
?masonmd
??mansonmd
?mut.info
classify.nmd(gene_id = 2, ref = G, mut_start = 9221429, mut_end = 9221429,ref_nt = "G",mut_nt = "A")
classify.nmd(gene_id = 2, ref = 37, mut_start = 9221429, mut_end = 9221429,ref_nt = "G",mut_nt = "A")
classify.nmd(gene_id = 13, ref = 37, mut_start = 151545640, mut_end = 151545640,ref_nt = "G",mut_nt = "T")
mut.info(gene_id = 13, ref = 37, mut_start = 151545640, mut_end = 151545640, ref_nt = "G",mut_nt = "T")
library(masonmd)
?classify.nmd
library(masonmd)
??masonmd
?classify.nmd
?mut.info
?classify.nmd
classify.nmd(gene_id = 13, ref = 37, mut_start = 151545640, mut_end = 151545640,
ref_nt = "G",mut_nt = "T")
classify.nmd(gene_id = 2, ref = 37, mut_start = 9221429, mut_end = 9221429,
ref_nt = "G", mut_nt = "A")
devtools::build_vignettes()
?masonmd
library(masonmd)
?devtools::build()
?build
devtools::build()
git config --global user.name ZYBunnyHu
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
